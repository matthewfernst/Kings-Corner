name: Continuous Deployment

on:
  push:
    branches:
      - main

jobs:
  
  build-electron:
    
    name: Build Electron For ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2.3.1

      - name: Restore Cached Modules
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Necessary Windows Preinstall
        if: matrix.os == 'windows-latest' && steps.cache.outputs.cache-hit != 'true'
        run: npm install node-pre-gyp -g

      - name: Install Node Modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Set MacOS Signing Certs
        if: matrix.os == 'macOS-latest'
        run: chmod +x scripts/add-macos-cert.sh && ./scripts/add-macos-cert.sh
        env:
          MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
          MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}

      - name: Set Windows Signing Certificate
        uses: timheuer/base64-to-file@v1
        if: matrix.os == 'windows-latest'
        id: write_file
        with:
          fileName: "win-certificate.pfx"
          encodedString: ${{ secrets.WINDOWS_CODESIGN_P12 }}

      - name: Package App
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          WINDOWS_CODESIGN_FILE: ${{ steps.write_file.outputs.filePath }}
          WINDOWS_CODESIGN_PASSWORD: ${{ secrets.WINDOWS_CODESIGN_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
        run: npm run publishElectron
        continue-on-error: true

  build-container:
    
    name: Build Container
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node Modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Build Server
        run: npm run buildServer
        env:
          NODE_ENV: production

      - name: Build Website
        run: npm run buildWebsite
        env:
          NODE_ENV: production

      - name: Build and Push to GitHub Packages
        run: |
          docker build . --tag ghcr.io/meta-games-biz/kings-corner:latest
          docker push ghcr.io/meta-games-biz/kings-corner:latest

  restart-instance:
    
    name: Restart Instance
    needs: build-container
    runs-on: ubuntu-latest

    steps:
      - name: Execute AWS SSH Commands (Update Repo and Redeploy)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: ~/deploy.sh
